#version 430 core

//layout(local_size_x = 16, local_size_y = 16) in;
layout(local_size_x = 16, local_size_y = 16) in;
//layout(r8ui, binding = 0) uniform image2D output_texture;

uniform sampler2D input_texture;
layout(rgba32f) uniform image2D output_texture;

const int max_padding = 10;
uniform int kernel_size = max_padding;

shared float local_data[gl_WorkGroupSize.x + max_padding][gl_WorkGroupSize.y + max_padding];

float max_pool(in ivec2 pos) {
    float max_value = texelFetch(input_texture, pos, 0).r;
    for (int i = -kernel_size; i <= kernel_size; ++i) {
        for (int j = -kernel_size; j <= kernel_size; ++j) {
            float value = texelFetch(input_texture, pos + ivec2(i, j), 0).r;
            if (value > max_value) {
                max_value = value;
            }
        }
    }
    return max_value;
}

float max_pool_local() {
    float max_value = local_data[gl_LocalInvocationID.x + max_padding][gl_LocalInvocationID.y + max_padding];
    for (int i = -kernel_size; i <= kernel_size; ++i) {
        for (int j = -kernel_size; j <= kernel_size; ++j) {
//            float value = texelFetch(input_texture, pos + ivec2(i, j), 0).r;
            float value = local_data[gl_LocalInvocationID.x + max_padding + i][gl_LocalInvocationID.y + max_padding + j];
            if (value > max_value) {
                max_value = value;
            }
        }
    }
    return max_value;

}

void main() {
    // retrieve local data
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = textureSize(input_texture, 0);

    if (uv.x < size.x && uv.y < size.y) {
        local_data[max_padding + gl_LocalInvocationID.x][max_padding + gl_LocalInvocationID.y] = texelFetch(input_texture, uv, 0).r;
    }

    if (gl_LocalInvocationID.x == 0) {
        for (int i = 0; i < max_padding; ++i) {
            // TODO: move the branch outside of for loop
            if (uv.x - max_padding + i >= 0) {
                local_data[i][gl_LocalInvocationID.y + max_padding] =
                    texelFetch(input_texture, ivec2(uv.x - max_padding + i, uv.y), 0).r;
            } else {
                local_data[i][gl_LocalInvocationID.y + max_padding] = 0;
            }
        }
        if (gl_LocalInvocationID.y == 0) {
            for (int i = 0; i < max_padding; ++i) {
                for (int j = 0; j < max_padding; ++j) {
                    if (uv.x - max_padding + i >= 0 && uv.y - max_padding + j >= 0) {
                        local_data[i][j] =
                            texelFetch(input_texture, ivec2(uv.x - max_padding + i, uv.y - max_padding + j), 0).r;
                    } else {
                        local_data[i][j] = 0;
                    }
                }
            }
        }
    }

    if (gl_LocalInvocationID.y == 0) {
        for (int i = 0; i < max_padding; ++i) {
            if (uv.y - max_padding + i >= 0) {
                local_data[max_padding + gl_LocalInvocationID.x][i] =
                    texelFetch(input_texture, ivec2(uv.x, uv.y - max_padding + i), 0).r;
            } else {
                local_data[max_padding + gl_LocalInvocationID.x][i] = 0;
            }
        }
    }

    if (gl_LocalInvocationID.x == gl_WorkGroupSize.x - 1) {
        for (int i = 0; i < max_padding; ++i) {
            if (uv.x + i < size.x) {
                local_data[max_padding + gl_WorkGroupSize.x + i][max_padding + gl_LocalInvocationID.y] =
                    texelFetch(input_texture, ivec2(uv.x + i, uv.y), 0).r;
            } else {
                local_data[max_padding + gl_WorkGroupSize.x + i][max_padding + gl_LocalInvocationID.y] = 0;
            }
        }
        if (gl_LocalInvocationID.y == gl_WorkGroupSize.y - 1) {
            for (int i = 0; i < max_padding; ++i) {
                for (int j = 0; j < max_padding; ++j) {
                    if (uv.x + i < size.x && uv.y + j < size.y) {
                        local_data[max_padding + gl_WorkGroupSize.x + i][max_padding + gl_WorkGroupSize.y + j] =
                            texelFetch(input_texture, ivec2(uv.x + i, uv.y + j), 0).r;
                    } else {
                        local_data[max_padding + gl_WorkGroupSize.x + i][max_padding + gl_WorkGroupSize.y + j] = 0;
                    }
                }
            }
        }
    }

    if (gl_LocalInvocationID.y == gl_WorkGroupSize.y - 1) {
        for (int i = 0; i < max_padding; ++i) {
            if (uv.y + i < size.y) {
                local_data[max_padding + gl_LocalInvocationID.x][max_padding + gl_WorkGroupSize.y + i] =
                    texelFetch(input_texture, ivec2(uv.x, uv.y + i), 0).r;
            } else {
                local_data[max_padding + gl_LocalInvocationID.x][max_padding + gl_WorkGroupSize.y + i] = 0;
            }
        }
    }


    barrier();

    if (uv.x >= size.x || uv.y >= size.y) return;

//    float value = max_pool(uv);
    float value = max_pool_local();
    imageStore(output_texture, uv, vec4(value));
}
